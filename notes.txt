MVPs:
- Add different clothing items [x]
- saving clothing items to a outfit
- ??save outfit to a wardrobe?
- search by brands(brand.id, brand.name) [x]

Routes: 
- /outfits -> my outfits - login
- /outfits/:id -> specific outfit - login
- 

Database: (**bonus**)
- clothing: (name, brand.name, description, price, img, productId, unbrandedName, currency & price, image.best, **size**, userid)
    -type(shoe, top, bottom)
- Basic: Tops, bottoms, shoes, image.best
    -** accessories, hats, top-outwear, top-shirt
- Outfit: Contains 1 top, 1 bottom, 1 shoe
    -** interconnected outfits, or random outfits
- Users: Clothing items tied to Users [x]
    - outfits tied to user 
    - 

Bonus:
- Favorite brands   
- Wish list
- ** Things for sell**
- ** random outfits
- outfit carousel
- recommend brands or items
- trending outfits
- user size info in localstorage



select o.*,c.* from clothes c inner join outfits o on c.id = o.bottom_id union all

select o.*,c.* from clothes c inner join outfits o on c.id = o.top_id union all

select o.*,c.* from clothes c inner join outfits o on c.id = o.shoe_id


select o.*,c.* , o.name as outfitName from clothes c inner join outfits o on c.id = o.bottom_id WHERE o.userid = $1 union all
select o.*,c.* , o.name as outfitName from clothes c inner join outfits o on c.id = o.top_id WHERE o.userid = $1 union all
select o.*,c.* , o.name as outfitName from clothes c inner join outfits o on c.id = o.shoe_id WHERE o.userid = $1


select c.description from clothes c inner join outfits o on c.id = o.bottom_id union all

select c.description from clothes c inner join outfits o on c.id = o.top_id union all

select  c.description from clothes c inner join outfits o on c.id = o.shoe_id;
